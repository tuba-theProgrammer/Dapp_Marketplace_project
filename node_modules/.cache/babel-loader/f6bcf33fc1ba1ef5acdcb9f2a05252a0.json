{"ast":null,"code":"import _asyncToGenerator from \"/home/tuba/Work-Folder/BlockChain-Developement/Dapp_Ecommerce_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/tuba/Work-Folder/BlockChain-Developement/Dapp_Ecommerce_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React, { useEffect, useState } from 'react';\nimport getWeb3 from '../Utils/getWeb3';\nimport MarketPlace from '../abis/MarketPlace.json';\n\nfunction MarketPlaceComponent(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      getAccount = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      getProductCount = _useState4[0],\n      setProductCount = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      getProducts = _useState6[0],\n      setProducts = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      getLoading = _useState8[0],\n      setLoading = _useState8[1];\n\n  useEffect(function () {\n    loadBlockChainData();\n  }, []);\n\n  function loadBlockChainData() {\n    return _loadBlockChainData.apply(this, arguments);\n  }\n\n  function _loadBlockChainData() {\n    _loadBlockChainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var web3, accounts, networkId, networkData, marketplace;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getWeb3();\n\n            case 2:\n              web3 = _context.sent;\n              _context.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context.sent;\n              console.log(\"here is accounts \", accounts);\n              setAccount(accounts[0]); // to get the network id dynamically\n\n              _context.next = 10;\n              return web3.eth.net.getId();\n\n            case 10:\n              networkId = _context.sent;\n              console.log(networkId);\n              networkData = MarketPlace.networks[networkId];\n\n              if (networkData) {\n                // this is how we load actual smart contract into the blockchain\n                marketplace = web3.eth.Contract(MarketPlace.abi, networkData.address);\n                console.log(marketplace);\n              } else {}\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _loadBlockChainData.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nexport default MarketPlaceComponent;","map":{"version":3,"names":["React","useEffect","useState","getWeb3","MarketPlace","MarketPlaceComponent","props","getAccount","setAccount","getProductCount","setProductCount","getProducts","setProducts","getLoading","setLoading","loadBlockChainData","web3","eth","getAccounts","accounts","console","log","net","getId","networkId","networkData","networks","marketplace","Contract","abi","address"],"sources":["/home/tuba/Work-Folder/BlockChain-Developement/Dapp_Ecommerce_project/src/components/Marketplace.js"],"sourcesContent":["import React, {useEffect, useState } from 'react';\nimport getWeb3 from '../Utils/getWeb3';\nimport MarketPlace from '../abis/MarketPlace.json'\n\nfunction MarketPlaceComponent(props){\n   \n    const [getAccount,setAccount] = useState('');\n    const [getProductCount,setProductCount] = useState(0);\n    const [getProducts,setProducts]= useState([])\n    const [getLoading,setLoading]= useState(true)\n\n    useEffect(()=>{\n\n           loadBlockChainData();\n    },[])\n\n\n  \n\n    async function loadBlockChainData(){\n        const web3 = await getWeb3(); \n        //PASS AS PROP\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n        console.log(\"here is accounts \",accounts)\n        setAccount(accounts[0])\n\n        // to get the network id dynamically\n        const networkId= await web3.eth.net.getId();\n        console.log(networkId)\n        const networkData = MarketPlace.networks[networkId]\n        if(networkData){\n             // this is how we load actual smart contract into the blockchain\n        const marketplace = web3.eth.Contract(MarketPlace.abi,networkData.address)\n        console.log(marketplace)\n\n        }else{\n\n        }\n\n\n\n           \n    }\n\n     return(<>\n    \n     </>)\n}\nexport default MarketPlaceComponent;"],"mappings":";;;+CACA,oJ;;AADA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAoC;EAAA,gBAEAJ,QAAQ,CAAC,EAAD,CAFR;EAAA;EAAA,IAEzBK,UAFyB;EAAA,IAEdC,UAFc;;EAAA,iBAGUN,QAAQ,CAAC,CAAD,CAHlB;EAAA;EAAA,IAGzBO,eAHyB;EAAA,IAGTC,eAHS;;EAAA,iBAICR,QAAQ,CAAC,EAAD,CAJT;EAAA;EAAA,IAIzBS,WAJyB;EAAA,IAIbC,WAJa;;EAAA,iBAKDV,QAAQ,CAAC,IAAD,CALP;EAAA;EAAA,IAKzBW,UALyB;EAAA,IAKdC,UALc;;EAOhCb,SAAS,CAAC,YAAI;IAEPc,kBAAkB;EACxB,CAHQ,EAGP,EAHO,CAAT;;EAPgC,SAejBA,kBAfiB;IAAA;EAAA;;EAAA;IAAA,iFAehC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACuBZ,OAAO,EAD9B;;YAAA;cACUa,IADV;cAAA;cAAA,OAI2BA,IAAI,CAACC,GAAL,CAASC,WAAT,EAJ3B;;YAAA;cAIUC,QAJV;cAKIC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCF,QAAhC;cACAX,UAAU,CAACW,QAAQ,CAAC,CAAD,CAAT,CAAV,CANJ,CAQI;;cARJ;cAAA,OAS2BH,IAAI,CAACC,GAAL,CAASK,GAAT,CAAaC,KAAb,EAT3B;;YAAA;cASUC,SATV;cAUIJ,OAAO,CAACC,GAAR,CAAYG,SAAZ;cACMC,WAXV,GAWwBrB,WAAW,CAACsB,QAAZ,CAAqBF,SAArB,CAXxB;;cAYI,IAAGC,WAAH,EAAe;gBACV;gBACCE,WAFS,GAEKX,IAAI,CAACC,GAAL,CAASW,QAAT,CAAkBxB,WAAW,CAACyB,GAA9B,EAAkCJ,WAAW,CAACK,OAA9C,CAFL;gBAGfV,OAAO,CAACC,GAAR,CAAYM,WAAZ;cAEC,CALD,MAKK,CAEJ;;YAnBL;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAfgC;IAAA;EAAA;;EAyC/B,oBAAO,yCAAP;AAGJ;;AACD,eAAetB,oBAAf"},"metadata":{},"sourceType":"module"}